"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyMiddleware = exports.makeConsumer = void 0;
const haredo_message_1 = require("./haredo-message");
const bluebird_1 = require("bluebird");
const events_1 = require("./events");
const errors_1 = require("./errors");
const haredo_1 = require("./haredo");
const utils_1 = require("./utils");
const message_manager_1 = require("./message-manager");
exports.makeConsumer = async (cb, connectionManager, opts, log) => {
    let channel;
    let messageManager = message_manager_1.makeMessageManager(log);
    let consumerTag;
    const emitter = events_1.makeEmitter();
    const { noAck, exclusive, priority } = opts;
    const close = async () => {
        consumer.isClosing = true;
        if (consumerTag && channel) {
            await channel.cancel(consumerTag);
        }
        await messageManager.drain();
        emitter.emit('close');
        consumer.isClosed = true;
    };
    const setPrefetch = (prefetch) => {
        return channel.prefetch(prefetch, true);
    };
    const start = async () => {
        await opts.setup();
        channel = await connectionManager.getChannel();
        channel.once('close', async () => {
            log.info({ component: 'Consumer', msg: 'channel closed' });
            channel = null;
            if (opts.reestablish) {
                await bluebird_1.delay(5);
                try {
                    if (!consumer.isClosing) {
                        messageManager = message_manager_1.makeMessageManager(log);
                        await start();
                        emitter.emit('reestablished');
                    }
                }
                catch (error) {
                    // TODO: attempt again
                    log.error({ component: 'Consumer', msg: 'Failed to restart consumer', error });
                    emitter.emit('error', error);
                }
            }
            else if (!consumer.isClosing) {
                await close();
            }
        });
        await setPrefetch(opts.prefetch || 0);
        ({ consumerTag } = await channel.consume(opts.queue.getName(), async (message) => {
            var _a, _b, _c, _d, _e;
            if (message === null) {
                return;
            }
            await ((_a = opts.backoff) === null || _a === void 0 ? void 0 : _a.take());
            let messageInstance;
            const methods = {
                ack: () => {
                    var _a, _b;
                    /* istanbul ignore if */
                    if (!channel) {
                        throw new errors_1.ChannelBrokenError();
                    }
                    if (!noAck) {
                        channel.ack(message);
                    }
                    (_b = (_a = opts.backoff) === null || _a === void 0 ? void 0 : _a.ack) === null || _b === void 0 ? void 0 : _b.call(_a);
                },
                nack: (requeue = true) => {
                    var _a, _b;
                    /* istanbul ignore if */
                    if (!channel) {
                        throw new errors_1.ChannelBrokenError();
                    }
                    if (!noAck) {
                        channel.nack(message, false, requeue);
                    }
                    (_b = (_a = opts.backoff) === null || _a === void 0 ? void 0 : _a.nack) === null || _b === void 0 ? void 0 : _b.call(_a, requeue);
                },
                reply: async (reply) => {
                    if (!(message.properties.replyTo && message.properties.correlationId)) {
                        return;
                    }
                    await haredo_1.initialChain({ connectionManager })
                        .queue(message.properties.replyTo)
                        .skipSetup()
                        .confirm()
                        .publish(opts.json ? JSON.stringify(reply) : reply, {
                        correlationId: message.properties.correlationId
                    });
                }
            };
            try {
                if (consumer.isClosing) {
                    return;
                }
                messageInstance = haredo_message_1.makeHaredoMessage(message, opts.json, opts.queue.getName(), methods);
                messageManager.add(messageInstance);
                await exports.applyMiddleware(opts.middleware || [], cb, messageInstance, opts.autoAck, opts.autoReply, log);
                (_c = (_b = opts.backoff) === null || _b === void 0 ? void 0 : _b.pass) === null || _c === void 0 ? void 0 : _c.call(_b);
            }
            catch (error) {
                (_e = (_d = opts.backoff) === null || _d === void 0 ? void 0 : _d.fail) === null || _e === void 0 ? void 0 : _e.call(_d, error);
                if (!messageInstance) {
                    log.error({ component: 'Consumer', error, msg: 'failed initializing a message instance', rawMessage: message });
                    methods.nack(false);
                }
                else {
                    log.error({ component: 'Consumer', error, msg: 'error while handling message', message: messageInstance, rawMessage: message });
                    if (!noAck) {
                        messageInstance.nack(true);
                    }
                }
            }
        }, { noAck, priority, exclusive }));
    };
    const consumer = {
        close,
        emitter,
        isClosed: false,
        isClosing: false,
        prefetch: setPrefetch
    };
    await start();
    return consumer;
};
exports.applyMiddleware = async (middleware, cb, msg, autoAck, autoReply, log) => {
    if (!middleware.length) {
        const response = await cb(msg);
        if (typeof response !== 'undefined' && autoReply) {
            await msg.reply(response);
        }
        if (autoAck) {
            msg.ack();
        }
    }
    else {
        let nextWasCalled = false;
        await utils_1.head(middleware)(msg, () => {
            nextWasCalled = true;
            if (msg.isHandled()) {
                log.warning({ component: 'Consumer', msg: 'message was handled in the middleware but middleware called next() anyway', message: msg, rawMessage: msg.raw });
                return;
            }
            return exports.applyMiddleware(utils_1.tail(middleware), cb, msg, autoAck, autoReply, log);
        });
        if (!nextWasCalled && !msg.isHandled()) {
            await exports.applyMiddleware(utils_1.tail(middleware), cb, msg, autoAck, autoReply, log);
        }
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3VtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvY29uc3VtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscURBQTZFO0FBSzdFLHVDQUFpQztBQUNqQyxxQ0FBMEQ7QUFDMUQscUNBQThDO0FBQzlDLHFDQUF3QztBQUN4QyxtQ0FBcUM7QUFDckMsdURBQXVEO0FBNEMxQyxRQUFBLFlBQVksR0FBRyxLQUFLLEVBQzdCLEVBQXFDLEVBQ3JDLGlCQUFvQyxFQUNwQyxJQUFrQixFQUNsQixHQUFZLEVBQ0ssRUFBRTtJQUNuQixJQUFJLE9BQWdCLENBQUM7SUFDckIsSUFBSSxjQUFjLEdBQUcsb0NBQWtCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDN0MsSUFBSSxXQUFtQixDQUFDO0lBQ3hCLE1BQU0sT0FBTyxHQUFHLG9CQUFXLEVBQWtCLENBQUM7SUFDOUMsTUFBTSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsSUFBSSxDQUFDO0lBQzVDLE1BQU0sS0FBSyxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ3JCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQzFCLElBQUksV0FBVyxJQUFJLE9BQU8sRUFBRTtZQUN4QixNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDckM7UUFDRCxNQUFNLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUM3QixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RCLFFBQVEsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQzdCLENBQUMsQ0FBQztJQUNGLE1BQU0sV0FBVyxHQUFHLENBQUMsUUFBZ0IsRUFBRSxFQUFFO1FBQ3JDLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQyxDQUFDO0lBQ0YsTUFBTSxLQUFLLEdBQUcsS0FBSyxJQUFJ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