"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addJson = exports.addExchangeBinding = exports.addExchange = exports.addQueue = exports.publishToExchange = exports.publishToQueue = exports.rpcToExchange = exports.rpcToQueue = exports.queueChain = exports.exchangeChain = exports.chainMethods = exports.initialChain = exports.haredo = exports.LogLevel = void 0;
const connection_manager_1 = require("./connection-manager");
const consumer_1 = require("./consumer");
const exchange_1 = require("./exchange");
const prepared_message_1 = require("./prepared-message");
const queue_1 = require("./queue");
const rpc_1 = require("./rpc");
const state_1 = require("./state");
const utils_1 = require("./utils");
const errors_1 = require("./errors");
var LogLevel;
(function (LogLevel) {
    LogLevel["DEBUG"] = "DEBUG";
    LogLevel["INFO"] = "INFO";
    LogLevel["WARNING"] = "WARNING";
    LogLevel["ERROR"] = "ERROR";
})(LogLevel = exports.LogLevel || (exports.LogLevel = {}));
const makeLogger = (level, logger) => ({ component, msg, message, rawMessage, error }) => logger(utils_1.omitUndefined({ component, msg, message, rawMessage, error, level, timestamp: new Date() }));
exports.haredo = ({ connection, socketOpts, logger = () => { } }) => {
    validateConnectionOptions(connection);
    const log = {
        debug: makeLogger(LogLevel.DEBUG, logger),
        info: makeLogger(LogLevel.INFO, logger),
        warning: makeLogger(LogLevel.WARNING, logger),
        error: makeLogger(LogLevel.ERROR, logger)
    };
    const connectionManager = connection_manager_1.makeConnectionManager(connection, socketOpts, log);
    return Object.assign(Object.assign({}, exports.initialChain(utils_1.merge(state_1.defaultState(), { connectionManager, log }))), { close: async () => {
            await connectionManager.close();
        }, connect: async () => {
            await connectionManager.getConnection();
        } });
};
const validateConnectionOptions = (connectionOpts) => {
    if (typeof connectionOpts === 'string') {
        return;
    }
    const allowedKeys = ['frameMax', 'heartbeat', 'hostname', 'locale', 'password', 'port', 'protocol', 'username', 'vhost', 'reconnectDelays'];
    for (const key of Object.keys(connectionOpts)) {
        if (!allowedKeys.includes(key)) {
            throw new errors_1.InvalidOptionsError(key);
        }
    }
};
exports.initialChain = (state) => {
    return {
        queue: exports.addQueue(exports.queueChain)(state),
        exchange: exports.addExchange(exports.exchangeChain)(state)
    };
};
const addSetup = (state) => async () => {
    var _a;
    if (state.skipSetup) {
        return;
    }
    const channel = await state.connectionManager.getChannel();
    let channelIsClosed = false;
    channel.on('close', () => {
        channelIsClosed = true;
    });
    try {
        if (typeof state.queue !== 'undefined') {
            const _b = state.queue.getOpts(), { preferences } = _b, queueOpts = __rest(_b, ["preferences"]);
            let queueData;
            const queueInitialName = state.queue.getName();
            // amq. prefixed queue names are only allowed as server-assigned.
            // In case of reconnection we want to wipe the name and let server
            // assign a new name.
            const queueName = /^amq\./.test(queueInitialName) ? '' : queueInitialName;
            if (preferences === null || preferences === void 0 ? void 0 : preferences.passive) {
                queueData = await channel.checkQueue(queueName);
            }
            else {
                queueData = await channel.assertQueue(queueName, queueOpts);
            }
            state.queue.mutateName(queueData.queue);
        }
        if (state.exchange) {
            const _c = state.exchange.getOpts(), { preferences } = _c, exchangeOpts = __rest(_c, ["preferences"]);
            if (preferences === null || preferences === void 0 ? void 0 : preferences.passive) {
                await channel.checkExchange(state.exchange.getName());
            }
            else {
                await channel.assertExchange(state.exchange.getName(), state.exchange.getType(), exchangeOpts);
            }
        }
        if ((_a = state.bindings) === null || _a === void 0 ? void 0 : _a.length) {
            await utils_1.promiseMap(state.bindings, async (binding) => {
                const _a = binding.exchange.getOpts(), { preferences } = _a, exchangeOpts = __rest(_a, ["preferences"]);
                if (preferences === null || preferences === void 0 ? void 0 : preferences.passive) {
                    await channel.checkExchange(binding.exchange.getName());
                }
                else {
                    await channel.assertExchange(binding.exchange.getName(), binding.exchange.getType(), exchangeOpts);
                }
                await utils_1.promiseMap(binding.patterns, async (pattern) => {
                    if (state.queue) {
                        await channel.bindQueue(state.queue.getName(), binding.exchange.getName(), pattern);
                    }
                    else {
                        await channel.bindExchange(state.exchange.getName(), binding.exchange.getName(), pattern);
                    }
                });
            });
        }
    }
    finally {
        if (!channelIsClosed) {
            await channel.close();
        }
    }
};
exports.chainMethods = (chain) => (state) => ({
    json: exports.addJson(chain)(state),
    setup: addSetup(state),
    confirm: addConfirm(chain)(state)
});
exports.exchangeChain = (state) => {
    const bindExchange = exports.addExchangeBinding(exports.exchangeChain)(state);
    return Object.assign(Object.assign({ bindExchange, getState: () => state }, exports.chainMethods(exports.exchangeChain)(state)), { publish: exports.publishToExchange(state), rpc: exports.rpcToExchange(state), skipSetup: (skipSetup = true) => {
            return exports.exchangeChain(utils_1.merge(state, { skipSetup }));
        } });
};
exports.queueChain = (state) => {
    const bindExchange = exports.addExchangeBinding(exports.queueChain)(state);
    return Object.assign(Object.assign({ bindExchange }, exports.chainMethods(exports.queueChain)(state)), { publish: exports.publishToQueue(state), rpc: exports.rpcToQueue(state), getState: () => state, subscribe: async (cb) => {
            var _a, _b, _c, _d, _e, _f;
            const consumer = await consumer_1.makeConsumer(cb, state.connectionManager, {
                autoAck: (_a = state.autoAck) !== null && _a !== void 0 ? _a : true,
                json: (_b = state.json) !== null && _b !== void 0 ? _b : true,
                middleware: state.middleware,
                autoReply: (_c = state.autoReply) !== null && _c !== void 0 ? _c : false,
                prefetch: state.prefetch,
                queue: state.queue,
                reestablish: (_d = state.reestablish) !== null && _d !== void 0 ? _d : true,
                backoff: state.backoff,
                noAck: (_e = state.noAck) !== null && _e !== void 0 ? _e : false,
                priority: state.priority,
                exclusive: (_f = state.exclusive) !== null && _f !== void 0 ? _f : false,
                setup: addSetup(state)
            }, state.log);
            state.connectionManager.addConsumer(consumer);
            return consumer;
        }, autoAck: (autoAck = true) => {
            return exports.queueChain(utils_1.merge(state, { autoAck }));
        }, prefetch: (prefetch = 0) => {
            return exports.queueChain(utils_1.merge(state, { prefetch }));
        }, reestablish: (reestablish = true) => {
            return exports.queueChain(utils_1.merge(state, { reestablish }));
        }, autoReply: (autoReply = true) => {
            return exports.queueChain(utils_1.merge(state, { autoReply }));
        }, backoff: (backoff) => {
            return exports.queueChain(utils_1.merge(state, { backoff }));
        }, skipSetup: (skipSetup = true) => {
            return exports.queueChain(utils_1.merge(state, { skipSetup }));
        }, use: (...middleware) => {
            return exports.queueChain(utils_1.merge(state, { middleware: (state.middleware || []).concat(middleware) }));
        }, noAck: (noAck = true) => {
            return exports.queueChain(utils_1.merge(state, { noAck }));
        }, priority: (priority) => {
            return exports.queueChain(utils_1.merge(state, { priority }));
        }, exclusive: (exclusive = true) => {
            return exports.queueChain(utils_1.merge(state, { exclusive }));
        } });
};
exports.rpcToQueue = (state) => async (message, opts) => {
    await addSetup(state)();
    const correlationId = rpc_1.generateCorrelationId();
    const { promise, queue } = await state.connectionManager.rpc(correlationId);
    const preppedMessage = prepMessage(state, message, undefined, opts)
        .correlationId(correlationId)
        .replyTo(queue)
        .getState();
    await state.connectionManager.publisher.sendToQueue(state.queue.getName(), Buffer.from(preppedMessage.content), preppedMessage.options, state.confirm);
    return promise;
};
exports.rpcToExchange = (state) => async (message, routingKey, options = {}) => {
    await addSetup(state)();
    const correlationId = rpc_1.generateCorrelationId();
    const { promise, queue } = await state.connectionManager.rpc(correlationId);
    const preppedMessage = prepMessage(state, message, routingKey, options)
        .correlationId(correlationId)
        .replyTo(queue)
        .getState();
    await state.connectionManager.publisher.publishToExchange(state.exchange.getName(), preppedMessage.routingKey, Buffer.from(preppedMessage.content), preppedMessage.options, state.confirm);
    return promise;
};
const prepMessage = (state, message, routingKey, options = {}) => {
    if (!prepared_message_1.isHaredoPreparedMessage(message)) {
        if (state.json) {
            message = prepared_message_1.preparedMessage({}).json(message);
        }
        else {
            message = prepared_message_1.preparedMessage({}).rawContent(message);
        }
    }
    if (routingKey) {
        message = message.routingKey(routingKey);
    }
    message = prepared_message_1.preparedMessage(prepared_message_1.mergeMessageState(message.getState(), { options }));
    return message;
};
exports.publishToQueue = (state) => async (message, options = {}) => {
    const preppedMessage = prepMessage(state, message, undefined, options).getState();
    await addSetup(state)();
    return state.connectionManager.publisher.sendToQueue(state.queue.getName(), Buffer.from(preppedMessage.content), preppedMessage.options, state.confirm);
};
exports.publishToExchange = (state) => async (message, routingKey, options) => {
    const preppedMessage = prepMessage(state, message, routingKey, options).getState();
    await addSetup(state)();
    return state.connectionManager.publisher.publishToExchange(state.exchange.getName(), preppedMessage.routingKey, Buffer.from(preppedMessage.content), preppedMessage.options, state.confirm);
};
exports.addQueue = (chain) => (state) => (queue, opts = {}) => {
    if (typeof queue === 'string') {
        queue = queue_1.makeQueueConfig(queue, opts);
    }
    return chain(utils_1.merge(state, { queue }));
};
exports.addExchange = (chain) => (state) => (exchange, type, opts = {}) => {
    if (typeof exchange === 'string') {
        exchange = exchange_1.makeExchangeConfig(exchange, type, opts);
    }
    return chain(utils_1.merge(state, { exchange }));
};
exports.addExchangeBinding = (chain) => (state) => (exchange, pattern, type, opts = {}) => {
    if (typeof exchange === 'string') {
        exchange = exchange_1.makeExchangeConfig(exchange, type, opts);
    }
    return chain(utils_1.merge(state, { bindings: (state.bindings || [])
            .concat({ exchange, patterns: [].concat(pattern) }) }));
};
const addConfirm = (chain) => (state) => (confirm = true) => chain(utils_1.merge(state, { confirm }));
exports.addJson = (chain) => (state) => (json = true) => chain(utils_1.merge(state, { json }));
//# sourceMappingURL=data:application/json;base64,