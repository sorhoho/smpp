"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.walkUntilEnd = exports.makeTicketMachine = exports.parseJSON = exports.merge = exports.omitUndefined = exports.omit = exports.delay = exports.tail = exports.head = exports.promiseMap = void 0;
const errors_1 = require("./errors");
exports.promiseMap = async (arr, cb) => {
    return Promise.all(arr.map(cb));
};
exports.head = (arr) => arr[0];
exports.tail = (arr) => arr.slice(1);
exports.delay = (ms) => {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
};
exports.omit = (item, ...keys) => {
    const omittedItem = {};
    for (const [key, value] of Object.entries(item)) {
        if (!keys.includes(key)) {
            omittedItem[key] = value;
        }
    }
    return omittedItem;
};
exports.omitUndefined = (item) => {
    const undefinedKeys = Object.keys(item).filter((key) => {
        return item[key] === undefined;
    });
    return exports.omit(item, ...undefinedKeys);
};
exports.merge = (base, top) => {
    return Object.assign({}, base, top);
};
exports.parseJSON = (data) => {
    try {
        return JSON.parse(data);
    }
    catch (_a) {
        throw new errors_1.FailedParsingJsonError(data);
    }
};
exports.makeTicketMachine = () => {
    let paused = false;
    let waiting = false;
    let stopped = false;
    const tickets = [];
    const check = () => {
        if (stopped) {
            throw new Error('Ticketmachine has been stopped, no new tickets will be forthcoming');
        }
        if (paused || waiting) {
            return;
        }
        const ticket = tickets.shift();
        if (!ticket) {
            return;
        }
        waiting = true;
        ticket.resolve(() => {
            waiting = false;
            check();
        });
    };
    const play = () => {
        paused = false;
        check();
    };
    const pause = () => {
        paused = true;
    };
    const stop = (e = new Error()) => {
        stopped = true;
        tickets.forEach(x => x.reject(e));
        tickets.length = 0;
    };
    const take = async () => {
        let resolve;
        let reject;
        const promise = new Promise((res, rej) => {
            resolve = res;
            reject = rej;
        });
        tickets.push({ resolve, reject });
        check();
        return promise;
    };
    return {
        take,
        check,
        pause,
        play,
        stop
    };
};
exports.walkUntilEnd = (arr) => {
    let currentIndex = 0;
    return () => {
        const item = arr[currentIndex];
        if (currentIndex + 1 < arr.length) {
            currentIndex += 1;
        }
        return item;
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEscUNBQWtEO0FBRXJDLFFBQUEsVUFBVSxHQUFHLEtBQUssRUFBUSxHQUFRLEVBQUUsRUFBc0MsRUFBRSxFQUFFO0lBQ3ZGLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBSSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDdkMsQ0FBQyxDQUFDO0FBRVcsUUFBQSxJQUFJLEdBQUcsQ0FBSSxHQUFRLEVBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyxRQUFBLElBQUksR0FBRyxDQUFJLEdBQVEsRUFBTyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUUxQyxRQUFBLEtBQUssR0FBRyxDQUFDLEVBQVUsRUFBRSxFQUFFO0lBQ2hDLE9BQU8sSUFBSSxPQUFPLENBQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUNqQyxVQUFVLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBS1csUUFBQSxJQUFJLEdBQUcsQ0FBdUIsSUFBTyxFQUFFLEdBQUcsSUFBUyxFQUFFLEVBQUU7SUFDaEUsTUFBTSxXQUFXLEdBQUcsRUFBZ0IsQ0FBQztJQUNyQyxLQUFLLE1BQU0sQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUM3QyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFRLENBQUMsRUFBRTtZQUMxQixXQUFXLENBQUMsR0FBMEIsQ0FBQyxHQUFHLEtBQUssQ0FBQztTQUNuRDtLQUNKO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBRVcsUUFBQSxhQUFhLEdB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