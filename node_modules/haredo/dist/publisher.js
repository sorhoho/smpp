"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapChannel = exports.wrappedChannelGetter = exports.makePublisher = void 0;
const utils_1 = require("./utils");
exports.makePublisher = (cm, log) => {
    const getChannel = exports.wrappedChannelGetter(() => cm.getChannel(), log, false);
    const getConfirmChannel = exports.wrappedChannelGetter(() => cm.getConfirmChannel(), log, true);
    return {
        publishToExchange: async (exchange, routingKey, data, opts, confirm) => {
            let channel;
            if (confirm) {
                channel = await getConfirmChannel();
            }
            else {
                channel = await getChannel();
            }
            return channel.publishToExchange(exchange, routingKey, data, opts);
        },
        sendToQueue: async (queue, data, opts, confirm) => {
            let channel;
            if (confirm) {
                channel = await getConfirmChannel();
            }
            else {
                channel = await getChannel();
            }
            return channel.sendToQueue(queue, data, opts);
        }
    };
};
exports.wrappedChannelGetter = (channelGetter, log, isConfirmChannel) => {
    let channelPromise;
    let wrappedChannel;
    return async () => {
        if (wrappedChannel) {
            return wrappedChannel;
        }
        if (channelPromise) {
            await channelPromise;
            return wrappedChannel;
        }
        channelPromise = channelGetter();
        log.info({ component: 'Publisher', msg: 'opening channel' });
        const channel = await channelPromise;
        log.info({ component: 'Publisher', msg: 'channel opened' });
        wrappedChannel = exports.wrapChannel(channel, isConfirmChannel, log);
        channelPromise = undefined;
        channel.on('close', () => {
            log.info({ component: 'Publisher', msg: 'channel closed' });
            wrappedChannel.stop();
            wrappedChannel = undefined;
        });
        return wrappedChannel;
    };
};
exports.wrapChannel = (channel, confirm, log, ticketMachine = utils_1.makeTicketMachine()) => {
    channel.on('drain', () => {
        log.debug({ component: 'Publisher', msg: `${confirm ? 'confirm-channel' : 'channel'} drained, resuming publishing` });
        ticketMachine.play();
    });
    return {
        publishToExchange: async (exchange, routingKey, data, opts) => {
            const release = await ticketMachine.take();
            if (isConfirmChannel(channel, confirm)) {
                return new Promise((resolve, reject) => {
                    const ready = channel.publish(exchange, routingKey, data, opts, (err) => {
                        release();
                        if (err) {
                            return reject(err);
                        }
                        resolve();
                    });
                    if (!ready) {
                        ticketMachine.pause();
                    }
                });
            }
            const ready = channel.publish(exchange, routingKey, data, opts);
            if (!ready) {
                /* istanbul ignore next */
                log.debug({ component: 'Publisher', msg: `${confirm ? 'confirm-channel' : 'channel'} returned false on publishing, pausing publishing until drain` });
                ticketMachine.pause();
            }
            release();
        },
        sendToQueue: async (queue, data, opts) => {
            const release = await ticketMachine.take();
            if (isConfirmChannel(channel, confirm)) {
                return new Promise((resolve, reject) => {
                    const ready = channel.sendToQueue(queue, data, opts, (err) => {
                        release();
                        if (err) {
                            return reject(err);
                        }
                        resolve();
                    });
                    if (!ready) {
                        ticketMachine.pause();
                    }
                });
            }
            const ready = channel.sendToQueue(queue, data, opts);
            if (!ready) {
                /* istanbul ignore next */
                log.debug({ component: 'Publisher', msg: `${confirm ? 'confirm-channel' : 'channel'} returned false on publishing, pausing publishing until drain` });
                ticketMachine.pause();
            }
            release();
        },
        stop: () => {
            ticketMachine.stop();
        }
    };
};
const isConfirmChannel = (channel, isIt) => isIt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGlzaGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3B1Ymxpc2hlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSxtQ0FBNEM7QUFTL0IsUUFBQSxhQUFhLEdBQUcsQ0FBQyxFQUFxQixFQUFFLEdBQVksRUFBYSxFQUFFO0lBQzVFLE1BQU0sVUFBVSxHQUFHLDRCQUFvQixDQUFDLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0UsTUFBTSxpQkFBaUIsR0FBRyw0QkFBb0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEYsT0FBTztRQUNILGlCQUFpQixFQUFFLEtBQUssRUFBRSxRQUFnQixFQUFFLFVBQWtCLEVBQUUsSUFBWSxFQUFFLElBQTRCLEVBQUUsT0FBZ0IsRUFBRSxFQUFFO1lBQzVILElBQUksT0FBaUQsQ0FBQztZQUN0RCxJQUFJLE9BQU8sRUFBRTtnQkFDVCxPQUFPLEdBQUcsTUFBTSxpQkFBaUIsRUFBRSxDQUFDO2FBQ3ZDO2lCQUFNO2dCQUNILE9BQU8sR0FBRyxNQUFNLFVBQVUsRUFBRSxDQUFDO2FBQ2hDO1lBQ0QsT0FBTyxPQUFPLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkUsQ0FBQztRQUNELFdBQVcsRUFBRSxLQUFLLEVBQUUsS0FBYSxFQUFFLElBQVksRUFBRSxJQUE0QixFQUFFLE9BQWdCLEVBQUUsRUFBRTtZQUMvRixJQUFJLE9BQWlELENBQUM7WUFDdEQsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsT0FBTyxHQUFHLE1BQU0saUJBQWlCLEVBQUUsQ0FBQzthQUN2QztpQkFBTTtnQkFDSCxPQUFPLEdBQUcsTUFBTSxVQUFVLEVBQUUsQ0FBQzthQUNo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