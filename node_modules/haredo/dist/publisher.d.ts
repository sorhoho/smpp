/// <reference types="node" />
import { ConnectionManager } from './connection-manager';
import { Channel, ConfirmChannel } from 'amqplib';
import { ExtendedPublishOptions } from './prepared-message';
import { Loggers } from './state';
export interface Publisher {
    publishToExchange(exchange: string, routingKey: string, data: Buffer, opts: ExtendedPublishOptions, confirm: boolean): Promise<void>;
    sendToQueue(queue: string, data: Buffer, opts: ExtendedPublishOptions, confirm: boolean): Promise<void>;
}
export declare const makePublisher: (cm: ConnectionManager, log: Loggers) => Publisher;
export declare const wrappedChannelGetter: <T extends Channel | ConfirmChannel>(channelGetter: () => Promise<T>, log: Loggers, isConfirmChannel: boolean) => () => Promise<{
    publishToExchange: (exchange: string, routingKey: string, data: Buffer, opts: ExtendedPublishOptions) => Promise<void>;
    sendToQueue: (queue: string, data: Buffer, opts: ExtendedPublishOptions) => Promise<void>;
    stop: () => void;
}>;
export declare const wrapChannel: <T extends Channel | ConfirmChannel>(channel: T, confirm: boolean, log: Loggers, ticketMachine?: import("./utils").TicketMachine) => {
    publishToExchange: (exchange: string, routingKey: string, data: Buffer, opts: ExtendedPublishOptions) => Promise<void>;
    sendToQueue: (queue: string, data: Buffer, opts: ExtendedPublishOptions) => Promise<void>;
    stop: () => void;
};
