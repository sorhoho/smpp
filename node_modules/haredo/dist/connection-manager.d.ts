import { Connection, Options, Channel, ConfirmChannel } from 'amqplib';
import { TypedEventEmitter } from './events';
import { Consumer } from './consumer';
import { Loggers } from './state';
import { Publisher } from './publisher';
export interface Events {
    connected: Connection;
    error: Error;
    connectionclose: never;
}
export interface ConnectionManager {
    addConsumer: (consumer: Consumer) => void;
    emitter: TypedEventEmitter<Events>;
    close: () => Promise<void>;
    getConnection(): Promise<Connection>;
    getChannel(): Promise<Channel>;
    getConfirmChannel(): Promise<ConfirmChannel>;
    publisher: Publisher;
    rpc<TReply>(correlationId: string): Promise<{
        promise: Promise<TReply>;
        queue: string;
    }>;
}
export declare type ConnectionOptions = Options.Connect & {
    /**
     * An array of reconnection delays.
     * For example
     * [1000, 10000, 60000] would mean that after first attempt of connecting
     * there's a delay of 1s, then 10s and all the rest after 60s until a
     * successful connection to RabbitMQ is made
     * @default [1000]
    */
    reconnectDelays?: number[];
};
export declare const makeConnectionManager: (connectionOpts: string | ConnectionOptions, socketOpts: any, log: Loggers) => ConnectionManager;
