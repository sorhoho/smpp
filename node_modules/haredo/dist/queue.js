"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHaredoQueue = exports.padString = exports.makeQueueConfig = exports.DEFAULT_QUEUE_OPTIONS = void 0;
exports.DEFAULT_QUEUE_OPTIONS = Object.freeze({
    durable: true,
    exclusive: false
});
/**
 * Create a queue configuration object. Note: this does not assert the queue
 *
 * @param name name of the queue, falsey value (including empty string) will make the server generate a name for you
 * @param opts queue options, passed to assertQueue
 * [amqplib#assertQueue](https://www.squaremobius.net/amqp.node/channel_api.html#channel_assertQueue)
 */
exports.makeQueueConfig = (name, opts = {}) => {
    const cloneOpts = (top) => (Object.assign(Object.assign(Object.assign({}, opts), top), { arguments: Object.assign(Object.assign({}, opts === null || opts === void 0 ? void 0 : opts.arguments), top === null || top === void 0 ? void 0 : top.arguments) }));
    const argument = (argName, value) => exports.makeQueueConfig(name, cloneOpts({ arguments: { [argName]: value } }));
    return {
        metaType: 'queue',
        getName: () => name,
        getOpts: () => cloneOpts(opts),
        durable: (durable = true) => exports.makeQueueConfig(name, cloneOpts({ durable })),
        autoDelete: (autoDelete = true) => exports.makeQueueConfig(name, cloneOpts({ autoDelete })),
        exclusive: (exclusive = true) => exports.makeQueueConfig(name, cloneOpts({ exclusive })),
        messageTtl: (messageTtl) => exports.makeQueueConfig(name, cloneOpts({ messageTtl })),
        maxLength: (maxLength) => exports.makeQueueConfig(name, cloneOpts({ maxLength })),
        expires: (expires) => exports.makeQueueConfig(name, cloneOpts({ expires })),
        dead: (deadLetterExchange, deadLetterRoutingKey) => {
            if (typeof deadLetterExchange !== 'string') {
                deadLetterExchange = deadLetterExchange.getName();
            }
            return exports.makeQueueConfig(name, cloneOpts({ deadLetterExchange, deadLetterRoutingKey }));
        },
        name: (name) => exports.makeQueueConfig(name, cloneOpts({})),
        mutateName: (newName) => { name = newName; },
        maxPriority: priority => argument('x-max-priority', priority),
        type: type => argument('x-queue-type', type),
        passive: (passive = true) => exports.makeQueueConfig(name, cloneOpts({ preferences: { passive } })),
        deliveryLimit: limit => argument('x-delivery-limit', limit),
        argument
    };
};
exports.padString = (str) => ` ${str} `;
/**
 * Returns true if passed in object is an queue. Acts as a type guard for Queue.
 * @param obj Object to check
 */
exports.isHaredoQueue = (obj) => {
    return (obj === null || obj === void 0 ? void 0 : obj.metaType) === 'queue';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcXVldWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBU2EsUUFBQSxxQkFBcUIsR0FBaUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM3RCxPQUFPLEVBQUUsSUFBSTtJQUNiLFNBQVMsRUFBRSxLQUFLO0NBQ25CLENBQUMsQ0FBQztBQW9GQzs7Ozs7O0dBTUc7QUFDTSxRQUFBLGVBQWUsR0FBRyxDQUF1QyxJQUFhLEVBQUUsT0FBOEIsRUFBRSxFQUEyQixFQUFFO0lBQzlJLE1BQU0sU0FBUyxHQUFHLENBQUMsR0FBMEIsRUFBZ0IsRUFBRSxDQUFDLCtDQUN6RCxJQUFJLEdBQ0osR0FBRyxLQUNOLFNBQVMsa0NBQ0YsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLFNBQVMsR0FDZixHQUFHLGFBQUgsR0FBRyx1QkFBSCxHQUFHLENBQUUsU0FBUyxLQUV2QixDQUFDO0lBQ0gsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFlLEVBQUUsS0FBVSxFQUFFLEVBQUUsQ0FBQyx1QkFBZSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hILE9BQU87UUFDSCxRQUFRLEVBQUUsT0FBTztRQUNqQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSTtRQUNuQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztRQUM5QixPQUFPLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyx1QkFBZSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzFFLFVBQVUsRUFBRSxDQUFDLFVBQVUsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLHVCQUFlLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDbkYsU0FBUyxFQUFFLENBQUMsU0FBUyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsdUJBQWUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUNoRixVQUFVLEVBQUUsQ0FBQyxVQUFrQixFQUFFLEVBQUUsQ0FBQyx1QkFBZSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDO1FBQ3BGLFNBQVMsRUFBRSxDQUFDLFNBQWlCLEVBQUUsRUFBRSxDQUFDLHVCQUFlLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7UUFDakYsT0FBTyxFQUFFLENBQUMsT0FBZSxFQUFFLEVBQUUsQ0FBQyx1QkFBZSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLElBQUksRUFBRSxDQUFDLGtCQUFxQyxFQUFFLG9CQUE2QixFQUFFLEVBQUU7WUFDM0UsSUFBSSxPQUFPLGtCQUFrQixLQUFLLFFBQVEsRUFBRTtnQkFDeEMsa0JBQWtCLEdBQUcsa0JBQWtCLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDckQ7WUFDRCxPQUFPLHVCQUFlLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLGtCQUFrQixFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUM7UUFDRCxJQUFJLEVBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUFDLHVCQUFlLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM1RCxVQUFVLEVBQUUsQ0FBQyxPQUFlLEVBQUUsRUFBRSxHQUFHLElBQUksR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ3BELFdBQVcsRUFBRSxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxRQUFRLENBQUM7UUFDN0QsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUM7UUFDNUMsT0FBTyxFQUFFLENBQUMsT0FBTyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsdUJBQWUsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUUsV0FBVyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLGFBQWEsRUFBRSxLQUFLLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUM7UUFDM0QsUUFBUTtLQUNYLENBQUM7QUFDTixDQUFDLENBQUM7QUFFVyxRQUFBLFNBQVMsR0FBRyxDQUFDLEdBQVcsRUFBRSxFQUFFLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztBQUVyRDs7O0dBR0c7QUFDVSxRQUFBLGFBQWEsR0FBRyxDQUFDLEdBQVEsRUFBZ0IsRUFBRTtJQUNwRCxPQUFPLENBQUEsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLFFBQVEsTUFBSyxPQUFPLENBQUM7QUFDckMsQ0FBQyxDQUFDIn0=