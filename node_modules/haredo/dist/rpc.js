"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCorrelationId = exports.startRpc = void 0;
const queue_1 = require("./queue");
const errors_1 = require("./errors");
const events_1 = require("./events");
// TODO: add ability to timeout. Maybe use messageTTL combined with DLX?
// TODO: add ability to force close
exports.startRpc = async (haredo, { info, debug, warning, error }) => {
    const openListeners = {};
    const queue = queue_1.makeQueueConfig('').durable(false).autoDelete();
    let isClosing = false;
    const emitter = events_1.makeEmitter();
    info({ component: 'RPC', msg: 'starting consumer' });
    const consumer = await haredo
        .queue(queue)
        .noAck()
        .subscribe(({ correlationId, data }) => {
        const listener = openListeners[correlationId];
        if (listener) {
            debug({ component: 'RPC', msg: `resolving correlationId ${correlationId}` });
            listener.resolve(data);
            delete openListeners[correlationId];
            emitter.emit('resolve');
            if (isDrained()) {
                emitter.emit('drain');
            }
        }
        else {
            warning({ component: 'RPC', msg: `received unknown correlationId ${correlationId}` });
        }
    });
    const add = (correlationId) => {
        if (isClosing) {
            error({ component: 'RPC', msg: 'not attaching rpc listener since RPC service is closing' });
            throw new errors_1.HaredoClosingError();
        }
        return {
            queue: queue.getName(),
            // tslint:disable-next-line: no-useless-cast
            promise: new Promise((resolve, reject) => {
                debug({ component: 'RPC', msg: `attached listening for correlationId ${correlationId}` });
                openListeners[correlationId] = { resolve, reject };
            })
        };
    };
    const isDrained = () => {
        return Object.keys(openListeners).length === 0;
    };
    const close = async () => {
        info({ component: 'RPC', msg: 'closing...' });
        isClosing = true;
        if (isDrained()) {
            info({ component: 'RPC', msg: 'no more listeners, closing consumer' });
            await consumer.close();
            info({ component: 'RPC', msg: 'closed' });
            return;
        }
        info({ component: 'RPC', msg: `waiting for ${Object.keys(openListeners).length} replies before closing` });
        await events_1.typedEventToPromise(emitter, 'drain');
        info({ component: 'RPC', msg: 'no more listeners, closing consumer' });
        await consumer.close();
        info({ component: 'RPC', msg: 'closed' });
    };
    return {
        consumer,
        emitter,
        add,
        close
    };
};
exports.generateCorrelationId = () => {
    return `rpc-${Date.now()}-${Math.random().toString(36).split('.')[1]}`;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnBjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3JwYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxtQ0FBMEM7QUFDMUMscUNBQThDO0FBQzlDLHFDQUErRTtBQWdCL0Usd0VBQXdFO0FBQ3hFLG1DQUFtQztBQUV0QixRQUFBLFFBQVEsR0FBRyxLQUFLLEVBQW9CLE1BQXNDLEVBQUUsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQVcsRUFBcUIsRUFBRTtJQUNwSixNQUFNLGFBQWEsR0FBRyxFQUF1RixDQUFDO0lBQzlHLE1BQU0sS0FBSyxHQUFHLHVCQUFlLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzlELElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN0QixNQUFNLE9BQU8sR0FBRyxvQkFBVyxFQUFVLENBQUM7SUFDdEMsSUFBSSxDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO0lBQ3JELE1BQU0sUUFBUSxHQUFHLE1BQU0sTUFBTTtTQUN4QixLQUFLLENBQUMsS0FBSyxDQUFDO1NBQ1osS0FBSyxFQUFFO1NBQ1AsU0FBUyxDQUFDLENBQUMsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtRQUNuQyxNQUFNLFFBQVEsR0FBRyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDOUMsSUFBSSxRQUFRLEVBQUU7WUFDVixLQUFLLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSwyQkFBMkIsYUFBYSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQzdFLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDdkIsT0FBTyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDcEMsT0FBTyxDQUFDLElBQUksQ0FB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