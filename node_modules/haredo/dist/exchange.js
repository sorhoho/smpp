"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHaredoExchange = exports.makeExchangeConfig = exports.standardDelayedTypesArray = void 0;
const XDELAYEDTYPEKEY = 'x-delayed-type';
exports.standardDelayedTypesArray = [
    'direct',
    'fanout',
    'topic',
    'headers'
];
/**
 * Create a Exchange object to aid in setup (note: this doesn't assert it)
 * @param name name of the exchange
 * @param type Set the exchange type (direct/topic/headers/fanout/x-delayed-message)
 * @param opts Options that will be passed directly to amqplib
 * [amqplib#assertExchange](https://www.squaremobius.net/amqp.node/channel_api.html#channel_assertExchange)
 */
exports.makeExchangeConfig = (name, type, opts = {}) => {
    const cloneOpts = (top) => (Object.assign(Object.assign(Object.assign({}, opts), top), { arguments: Object.assign(Object.assign({}, opts.arguments), top.arguments), preferences: Object.assign(Object.assign({}, opts.preferences), top.preferences) }));
    return {
        metaType: 'exchange',
        getName: () => name,
        getType: () => type,
        getOpts: () => cloneOpts({}),
        durable: (durable = true) => exports.makeExchangeConfig(name, type, cloneOpts({ durable })),
        autoDelete: (autoDelete = true) => exports.makeExchangeConfig(name, type, cloneOpts({ autoDelete })),
        alternateExchange: (alternateExchange) => {
            if (typeof alternateExchange !== 'string') {
                alternateExchange = alternateExchange.getName();
            }
            return exports.makeExchangeConfig(name, type, Object.assign({}, opts, { alternateExchange }));
        },
        direct: () => exports.makeExchangeConfig(name, 'direct', opts),
        fanout: () => exports.makeExchangeConfig(name, 'fanout', opts),
        headers: () => exports.makeExchangeConfig(name, 'headers', opts),
        topic: () => exports.makeExchangeConfig(name, 'topic', opts),
        delayed: (xDelayedType) => exports.makeExchangeConfig(name, 'x-delayed-message', cloneOpts({ arguments: { 'x-delayed-type': xDelayedType } })),
        passive: (passive = true) => exports.makeExchangeConfig(name, type, cloneOpts({ preferences: { passive } }))
    };
};
/**
 * Returns true if passed in object is an exchange. Acts as a type guard for Exchange.
 * @param obj Object to check
 */
exports.isHaredoExchange = (obj) => {
    return (obj === null || obj === void 0 ? void 0 : obj.metaType) === 'exchange';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjaGFuZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZXhjaGFuZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsTUFBTSxlQUFlLEdBQUcsZ0JBQWdCLENBQUM7QUFNNUIsUUFBQSx5QkFBeUIsR0FBMkI7SUFDN0QsUUFBUTtJQUNSLFFBQVE7SUFDUixPQUFPO0lBQ1AsU0FBUztDQUNaLENBQUM7QUF1REY7Ozs7OztHQU1HO0FBQ1UsUUFBQSxrQkFBa0IsR0FBRyxDQUFXLElBQVksRUFBRSxJQUFrQixFQUFFLE9BQWlDLEVBQUUsRUFBc0IsRUFBRTtJQUN0SSxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQTZCLEVBQW1CLEVBQUUsQ0FBQywrQ0FDL0QsSUFBSSxHQUNKLEdBQUcsS0FDTixTQUFTLGtDQUNGLElBQUksQ0FBQyxTQUFTLEdBQ2QsR0FBRyxDQUFDLFNBQVMsR0FFcEIsV0FBVyxrQ0FDSixJQUFJLENBQUMsV0FBVyxHQUNoQixHQUFHLENBQUMsV0FBVyxLQUV4QixDQUFDO0lBQ0gsT0FBTztRQUNILFFBQVEsRUFBRSxVQUFVO1FBQ3BCLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO1FBQ25CLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJO1FBQ25CLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQzVCLE9BQU8sRUFBRSxDQUFDLE9BQU8sR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLDBCQUFrQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxDQUFDLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztRQUNuRixVQUFVLEVBQUUsQ0FBQyxVQUFVLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQywwQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUM7UUFDNUYsaUJBQWlCLEVBQUUsQ0FBQyxpQkFBb0MsRUFBRSxFQUFFO1lBQ3hELElBQUksT0FBTyxpQkFBaUIsS0FBSyxRQUFRLEVBQUU7Z0JBQ3ZDLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ25EO1lBQ0QsT0FBTywwQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzFGLENBQUM7UUFDRCxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsMEJBQWtCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUM7UUFDdEQsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFDLDBCQUFrQixDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDO1FBQ3RELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQywwQkFBa0IsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQztRQUN4RCxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsMEJBQWtCLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUM7UUFDcEQsT0FBTyxFQUFFLENBQUMsWUFBa0MsRUFBRSxFQUFFLENBQUMsMEJBQWtCLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFNBQVMsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFLGdCQUFnQixFQUFFLFlBQVksRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1SixPQUFPLEVBQUUsQ0FBQyxPQUFPLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQywwQkFBa0IsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxFQUFFLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztLQUN2RyxDQUFDO0FBQ04sQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBQ1UsUUFBQSxnQkFBZ0IsR0FBRyxDQUFDLEdBQVEsRUFBbUIsRUFBRTtJQUMxRCxPQUFPLENBQUEsR0FBRyxhQUFILEdBQUcsdUJBQUgsR0FBRyxDQUFFLFFBQVEsTUFBSyxVQUFVLENBQUM7QUFDeEMsQ0FBQyxDQUFDIn0=