export declare const promiseMap: <T, U>(arr: T[], cb: (obj: T, i: number, arr: T[]) => U) => Promise<U[]>;
export declare const head: <T>(arr: T[]) => T;
export declare const tail: <T>(arr: T[]) => T[];
export declare const delay: (ms: number) => Promise<void>;
declare type notany = object | string | number | undefined | null;
export declare type MergeTypes<T, U> = T extends notany ? U extends notany ? T | U : T : U;
export declare const omit: <T, K extends keyof T>(item: T, ...keys: K[]) => Pick<T, Exclude<keyof T, K>>;
export declare const omitUndefined: <T extends Record<string, any>>(item: T) => T;
export declare const merge: <T>(base: T, top: T) => T;
export declare const parseJSON: (data: string) => any;
export interface TicketMachine {
    take(): Promise<Function>;
    play(): void;
    pause(): void;
    stop(): void;
    check(): void;
}
export declare const makeTicketMachine: () => TicketMachine;
export declare const walkUntilEnd: <T>(arr: T[]) => () => T;
export {};
