"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = void 0;
const haredo_1 = require("../haredo");
const index_1 = require("../index");
const utils_1 = require("../utils");
exports.main = async () => {
    const chain = haredo_1.haredo({
        connection: 'amqp://guest:guest@localhost:5672/'
    });
    // Anonymous queue, server will assign a name when asserted
    const queue = index_1.q().autoDelete();
    const messagesExchange = index_1.e('messages', 'topic').autoDelete();
    const usersExchange = index_1.e('users', 'topic').autoDelete();
    await chain.queue(queue)
        // * in the pattern means 1 dot-separated word
        // could also do just '#' to match everything
        .bindExchange(messagesExchange, 'message.*')
        .bindExchange(usersExchange, ['user.create', 'user.update'])
        .subscribe(({ data, queue, routingKey }) => {
        console.log('Received message in queue', queue, 'routing key', routingKey, 'id', data.id, 'data', data);
    });
    let id = 0;
    while (true) {
        id += 1;
        console.log('Publishing messages', id);
        await chain.exchange(messagesExchange)
            .publish({ id, body: 'testmessage' }, 'message.create');
        await chain.exchange(usersExchange)
            .publish({ id, name: 'John Smith' }, 'user.create');
        await chain.exchange(usersExchange)
            .publish({ id, name: 'John Jones' }, 'user.update');
        await utils_1.delay(2000);
    }
};
process.nextTick(exports.main);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlcy9yb3V0aW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLHNDQUFtQztBQUNuQyxvQ0FBZ0M7QUFDaEMsb0NBQWlDO0FBRXBCLFFBQUEsSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO0lBQzNCLE1BQU0sS0FBSyxHQUFHLGVBQU0sQ0FBQztRQUNqQixVQUFVLEVBQUUsb0NBQW9DO0tBQ25ELENBQUMsQ0FBQztJQUNILDJEQUEyRDtJQUMzRCxNQUFNLEtBQUssR0FBRyxTQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUMvQixNQUFNLGdCQUFnQixHQUFHLFNBQUMsQ0FBK0IsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNGLE1BQU0sYUFBYSxHQUFHLFNBQUMsQ0FBK0IsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3JGLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDcEIsOENBQThDO1FBQzlDLDZDQUE2QztTQUM1QyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsV0FBVyxDQUFDO1NBQzNDLFlBQVksQ0FBQyxhQUFhLEVBQUUsQ0FBQyxhQUFhLEVBQUUsYUFBYSxDQUFDLENBQUM7U0FDM0QsU0FBUyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxFQUFFLEVBQUU7UUFDdkMsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUcsQ0FBQyxDQUFDLENBQUM7SUFDUCxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDWCxPQUFPLElBQUksRUFBRTtRQUNULEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDUixPQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQzthQUNqQyxPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLGFBQWEsRUFBRSxFQUFFLGdCQUFnQixDQUFDLENBQUM7UUFDNUQsTUFBTSxLQUFLLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQzthQUM5QixPQUFPLENBQUMsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7YUFDOUIsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RCxNQUFNLGFBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNyQjtBQUNMLENBQUMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxRQUFRLENBQUMsWUFBSSxDQUFDLENBQUMifQ==