"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isHaredoPreparedMessage = exports.mergeHeaders = exports.mergeOptions = exports.mergeMessageState = exports.preparedMessage = void 0;
exports.preparedMessage = (state = {}) => {
    return {
        metaType: 'preparedMessage',
        getState: () => state,
        appId: (appId) => exports.preparedMessage(exports.mergeMessageState(state, { options: { appId } })),
        blindCarbonCopy: (...BCC) => exports.preparedMessage(exports.mergeMessageState(state, { options: { BCC } })),
        carbonCopy: (...CC) => exports.preparedMessage(exports.mergeMessageState(state, { options: { CC } })),
        contentEncoding: (contentEncoding) => exports.preparedMessage(exports.mergeMessageState(state, { options: { contentEncoding } })),
        contentType: (contentType) => exports.preparedMessage(exports.mergeMessageState(state, { options: { contentType } })),
        correlationId: (correlationId) => exports.preparedMessage(exports.mergeMessageState(state, { options: { correlationId } })),
        delay: (delay) => exports.preparedMessage(state).setHeader('x-delay', delay),
        expiration: (expiration) => exports.preparedMessage(exports.mergeMessageState(state, { options: { expiration } })),
        json: (content) => {
            const chain = exports.preparedMessage(state).contentType('application/json');
            if (content !== undefined) {
                return chain.rawContent(JSON.stringify(content));
            }
            return chain;
        },
        mandatory: (mandatory = true) => exports.preparedMessage(exports.mergeMessageState(state, { options: { mandatory } })),
        messageId: (messageId) => exports.preparedMessage(exports.mergeMessageState(state, { options: { messageId } })),
        persistent: (persistent = true) => exports.preparedMessage(exports.mergeMessageState(state, { options: { persistent } })),
        priority: (priority) => exports.preparedMessage(exports.mergeMessageState(state, { options: { priority } })),
        rawContent: (content) => exports.preparedMessage(exports.mergeMessageState(state, { content })),
        replyTo: (replyTo) => exports.preparedMessage(exports.mergeMessageState(state, { options: { replyTo } })),
        routingKey: (routingKey) => exports.preparedMessage(exports.mergeMessageState(state, { routingKey })),
        timestamp: (timestamp) => exports.preparedMessage(exports.mergeMessageState(state, { options: { timestamp } })),
        type: (type) => exports.preparedMessage(exports.mergeMessageState(state, { options: { type } })),
        userId: (userId) => exports.preparedMessage(exports.mergeMessageState(state, { options: { userId } })),
        setHeader: (header, value) => exports.preparedMessage(exports.mergeMessageState(state, { options: { headers: { [header]: value } } })),
        setHeaders: (headers) => exports.preparedMessage(exports.mergeMessageState(state, { options: { headers } }))
    };
};
exports.mergeMessageState = (base, top) => ({
    content: top.content || base.content,
    routingKey: top.routingKey || base.routingKey,
    options: exports.mergeOptions(base.options, top.options)
});
exports.mergeOptions = (base = {}, top = {}) => (Object.assign(Object.assign(Object.assign({}, base), top), { headers: exports.mergeHeaders(base.headers, top.headers) }));
exports.mergeHeaders = (base = {}, top = {}) => (Object.assign(Object.assign({}, base), top));
/**
 * Returns true if the passed in object is a preparedMessage chain. Acts as a type quard for MessageChain
 * @param obj item to check
 */
exports.isHaredoPreparedMessage = (obj) => {
    return (obj === null || obj === void 0 ? void 0 : obj.metaType) === 'preparedMessage';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcGFyZWQtbWVzc2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9wcmVwYXJlZC1tZXNzYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQWdIYSxRQUFBLGVBQWUsR0FBRyxDQUFXLFFBQThDLEVBQUUsRUFBMEIsRUFBRTtJQUNsSCxPQUFPO1FBQ0gsUUFBUSxFQUFFLGlCQUFpQjtRQUMzQixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSztRQUVyQixLQUFLLEVBQUUsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLHVCQUFlLENBQUMseUJBQWlCLENBQUMsS0FBSyxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNGLGVBQWUsRUFBRSxDQUFDLEdBQUcsR0FBYSxFQUFFLEVBQUUsQ0FBQyx1QkFBZSxDQUFDLHlCQUFpQixDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN0RyxVQUFVLEVBQUUsQ0FBQyxHQUFHLEVBQVksRUFBRSxFQUFFLENBQUMsdUJBQWUsQ0FBQyx5QkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0YsZUFBZSxFQUFFLENBQUMsZUFBdUIsRUFBRSxFQUFFLENBQUMsdUJBQWUsQ0FBQyx5QkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDekgsV0FBVyxFQUFFLENBQUMsV0FBbUIsRUFBRSxFQUFFLENBQUMsdUJBQWUsQ0FBQyx5QkFBaUIsQ0FBQyxLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsRUFBRSxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDN0csYUFBYSxFQUFFLENBQUMsYUFBcUIsRUFBRSxFQUFFLENBQUMsdUJBQWUsQ0FB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