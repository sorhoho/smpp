"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeConnectionManager = void 0;
const amqplib_1 = require("amqplib");
const errors_1 = require("./errors");
const events_1 = require("./events");
const utils_1 = require("./utils");
const rpc_1 = require("./rpc");
const haredo_1 = require("./haredo");
const publisher_1 = require("./publisher");
exports.makeConnectionManager = (connectionOpts, socketOpts, log) => {
    let connection;
    let connectionPromise;
    let closed = false;
    const emitter = events_1.makeEmitter();
    let consumers = [];
    let rpcPromise;
    const addConsumer = (consumer) => {
        consumers = consumers.concat(consumer);
        consumer.emitter.on('close', () => {
            consumers = consumers.filter(x => x !== consumer);
        });
    };
    const closeConsumers = async () => {
        log.info({ component: 'ConnectionManager', msg: 'closing consumers' });
        await utils_1.promiseMap(consumers, async (consumer) => {
            await consumer.close();
        });
        log.info({ component: 'ConnectionManager', msg: 'done closing consumers' });
    };
    const getConnection = async () => {
        /* istanbul ignore if */
        if (closed) {
            const error = new errors_1.HaredoClosingError();
            log.error({ component: 'ConnectionManager', msg: 'closed, cannot create a new connection', error });
            emitter.emit('error', error);
            throw error;
        }
        if (!connectionPromise) {
            connectionPromise = loopGetConnection();
        }
        return connectionPromise;
    };
    const cm = {
        addConsumer,
        emitter,
        getConnection,
        close: async () => {
            log.info({ component: 'ConnectionManager', msg: 'closing...' });
            try {
                await connectionPromise;
            }
            catch (error) {
                /* istanbul ignore next */
                log.error({ component: 'ConnectionManager', msg: 'getting initial connection failed', error });
            }
            const rpc = await rpcPromise;
            await (rpc === null || rpc === void 0 ? void 0 : rpc.close());
            await closeConsumers();
            closed = true;
            log.info({ component: 'ConnectionManager', msg: 'closing rabbitmq connection' });
            await (connection === null || connection === void 0 ? void 0 : connection.close());
            log.info({ component: 'ConnectionManager', msg: 'closed' });
        },
        getChannel: async () => {
            const connection = await getConnection();
            const channel = await connection.createChannel();
            channel.on('error', () => { });
            return channel;
        },
        getConfirmChannel: async () => {
            const connection = await getConnection();
            const channel = await connection.createConfirmChannel();
            channel.on('error', () => { });
            return channel;
        }
    };
    cm.publisher = publisher_1.makePublisher(cm, log);
    const rpc = async (correlationId) => {
        if (!rpcPromise) {
            rpcPromise = rpc_1.startRpc(haredo_1.initialChain({ log, connectionManager: cm }), log);
        }
        const rpc = await rpcPromise;
        return rpc.add(correlationId);
    };
    const loopGetConnection = async () => {
        log.info({ component: 'ConnectionManager', msg: 'connecting' });
        let reconnectDelays = [1000];
        if (isConnectionOpts(connectionOpts) && connectionOpts.reconnectDelays) {
            reconnectDelays = connectionOpts.reconnectDelays;
        }
        const walker = utils_1.walkUntilEnd(reconnectDelays);
        while (true) {
            /* istanbul ignore if */
            if (closed) {
                throw new errors_1.HaredoClosingError();
            }
            try {
                connection = await amqplib_1.connect(connectionOpts, socketOpts);
                connection.on('error', /* istanbul ignore next */ (error) => {
                    log.error({ component: 'ConnectionManager', msg: 'connection error', error });
                });
                connection.on('close', async () => {
                    emitter.emit('connectionclose');
                    log.info({ component: 'ConnectionManager', msg: 'connection closed' });
                    connectionPromise = undefined;
                    connection = undefined;
                    if (!closed) {
                        log.info({ component: 'ConnectionManager', msg: 'reopening connection' });
                        await getConnection();
                    }
                });
                emitter.emit('connected', connection);
                log.info({ component: 'ConnectionManager', msg: 'connected' });
                return connection;
            }
            catch (error) /* istanbul ignore next */ {
                log.error({ component: 'ConnectionManager', msg: 'error while connecting', error });
                await utils_1.delay(walker());
            }
        }
    };
    cm.rpc = rpc;
    return cm;
};
const isConnectionOpts = (x) => {
    return typeof x === 'object';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29ubmVjdGlvbi1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2Nvbm5lY3Rpb24tbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBZ0Y7QUFDaEYscUNBQThDO0FBQzlDLHFDQUEwRDtBQUMxRCxtQ0FBMEQ7QUFFMUQsK0JBQTJDO0FBQzNDLHFDQUF3QztBQUV4QywyQ0FBdUQ7QUErQjFDLFFBQUEscUJBQXFCLEdBQUcsQ0FBQyxjQUEwQyxFQUFFLFVBQWUsRUFBRSxHQUFZLEVBQXFCLEVBQUU7SUFDbEksSUFBSSxVQUFzQixDQUFDO0lBQzNCLElBQUksaUJBQXNDLENBQUM7SUFDM0MsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ25CLE1BQU0sT0FBTyxHQUFHLG9CQUFXLEVBQVUsQ0FBQztJQUN0QyxJQUFJLFNBQVMsR0FBRyxFQUFnQixDQUFDO0lBQ2pDLElBQUksVUFBNkIsQ0FBQztJQUVsQyxNQUFNLFdBQVcsR0FBRyxDQUFDLFFBQWtCLEVBQUUsRUFBRTtRQUN2QyxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1lBQzlCLFNBQVMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLFFBQVEsQ0FBQyxDQUFDO1FBQ3RELENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0lBRUYsTUFBTSxjQUFjLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDOUIsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLFNBQVMsRUFBRSxtQkFBbUIsRUFBRSxHQUFHLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sa0JBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFO1lBQzND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